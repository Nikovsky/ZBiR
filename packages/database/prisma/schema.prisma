// @file: packages/database/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  // output   = "./../dist"
}

// DATABASE_URL="mysql://root:@localhost:3306/zbir"
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===[USER AND AUTHENTICATION MODELS]==============================================================
enum UserRole {
  ROOT
  SYSTEM
  ADMIN
  SKARBNIK
  SKARBNIK_REGION
  USER
}

enum UserRegion {
  ALL
  DOLNOSLASKI
  GORNOSLASKI
  KUJAWSKO_POMORSKI
  LUBELSKI
  LODZKI
  MALOPOLSKI
  MAZOWIECKI
  PODKARPACKI
  POMORSKI
  POLNOCNO_ZACHODNI
  STAROPOLSKI
  WIELKOPOLSKI
  NONE
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

model User {
  // Identity
  id                   String              @id @default(uuid())
  email                String              @unique
  username             String?
  name                 String?
  // Authentication
  password             String              @db.Text
  emailVerified        DateTime?
  isEmailConfirmed     Boolean             @default(false)
  twoFactorEnabled     Boolean             @default(false)
  failedLoginAttempts  Int                 @default(0)
  image                String?
  // Status and Roles
  role                 UserRole            @default(USER)
  isActive             Boolean             @default(true)
  isBlocked            Boolean             @default(false)
  regionAccess         UserRegion?         @default(NONE)
  lastLoginAt          DateTime?
  // Timestamps
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  // Auth Relations
  accounts             Account[]
  sessions             Session[]
  Authenticator        Authenticator[]
  VerificationToken    VerificationToken[]
  // Personal Data Relation
  personalData         PersonalData?
  // Camp Participation and Ownership
  userToCamps          UserToCamp[]
  campsOwning          Camp[]              @relation("campOwner")
  // Fico Entries
  createdEntries       FicoEntry[]         @relation("entryCreatedBy")
  updatedEntries       FicoEntry[]         @relation("entryUpdatedBy")
  // Notifications
  Notification         Notification[]
  notificationsCreated Notification[]      @relation("notificationCreator")

  @@index([email])
  @@index([isActive, role])
}

model PersonalData {
  id          String    @id @default(uuid())
  // Personal Information
  firstName   String?
  middleName  String?
  lastName    String?
  birthDate   DateTime?
  gender      Gender?
  // Contact Information
  phoneNumber String?
  address     String?
  city        String?
  zipCode     String?
  country     String?
  // Permissions
  canUserEdit Boolean   @default(true)
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // User Relation
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([firstName, lastName])
  @@index([phoneNumber])
}

model Account {
  id                       String   @id @default(uuid())
  // Provider Identification
  type                     String
  provider                 String
  providerAccountId        String
  // Token Information
  id_token                 String?  @db.Text
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  session_state            String?
  refresh_token_expires_in Int?
  // Timestamps
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  // User Relation
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  // Session Identification
  sessionToken String   @unique
  // Metadata
  expires      DateTime
  ip           String?
  deviceInfo   String?
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // User Relation
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ip])
}

enum VerificationTokenType {
  EMAIL_CONFIRMATION
  PASSWORD_RESET
  TWO_FACTOR
}

model VerificationToken {
  id         String                @id @default(uuid())
  // Token Details
  type       VerificationTokenType
  identifier String?
  token      String                @unique
  expires    DateTime
  // Timestamp
  createdAt  DateTime              @default(now())
  // Token Ownership - User Relation
  userId     String
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
}

model Authenticator {
  // Composite Primary key
  credentialID         String  @unique
  providerAccountId    String
  // WebAuthn Credential Details
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  // User Relation
  userId               String
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ===[CAMP AND FINANCIAL MODELS]===================================================================
model Camp {
  id           String       @id @default(uuid())
  // Details
  name         String
  year         Int
  region       UserRegion
  isClosed     Boolean      @default(false)
  approvedAt   DateTime?
  // Financial Summary
  incomeSum    Decimal      @default("0.00") @db.Decimal(15, 2)
  expenseSum   Decimal      @default("0.00") @db.Decimal(15, 2)
  balanceFinal Decimal      @default("0.00") @db.Decimal(15, 2)
  // Timestamps
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  // Ownership - User Relation
  ownerId      String
  owner        User         @relation("campOwner", fields: [ownerId], references: [id])
  // Relations
  entries      FicoEntry[]
  participants UserToCamp[]

  @@index([year])
  @@index([region])
}

model FicoEntry {
  id                   String   @id @default(uuid())
  // Basic Details
  ficoDate             DateTime
  ficoDescription      String
  // Bank Transactions
  bankDeposit          Decimal? @db.Decimal(15, 2)
  bankWithdrawal       Decimal? @db.Decimal(15, 2)
  // Income Breakdown
  grantHq              Decimal? @db.Decimal(15, 2)
  grantEdu             Decimal? @db.Decimal(15, 2)
  grantMuni            Decimal? @db.Decimal(15, 2)
  incomeActions        Decimal? @db.Decimal(15, 2)
  incomeParticipantFee Decimal? @db.Decimal(15, 2)
  donationPrivate      Decimal? @db.Decimal(15, 2)
  donationOrg          Decimal? @db.Decimal(15, 2)
  incomeOnePercent     Decimal? @db.Decimal(15, 2)
  incomeOther          Decimal? @db.Decimal(15, 2)
  // Expense Breakdown
  expEquipment         Decimal? @db.Decimal(15, 2)
  expMaterials         Decimal? @db.Decimal(15, 2)
  expCleaning          Decimal? @db.Decimal(15, 2)
  expOtherMaterials    Decimal? @db.Decimal(15, 2)
  expEnergy            Decimal? @db.Decimal(15, 2)
  expPhone             Decimal? @db.Decimal(15, 2)
  expRent              Decimal? @db.Decimal(15, 2)
  expPost              Decimal? @db.Decimal(15, 2)
  expBank              Decimal? @db.Decimal(15, 2)
  expCourier           Decimal? @db.Decimal(15, 2)
  expServices          Decimal? @db.Decimal(15, 2)
  expSalary            Decimal? @db.Decimal(15, 2)
  expInsuranceOC       Decimal? @db.Decimal(15, 2)
  expInsuranceNNW      Decimal? @db.Decimal(15, 2)
  expTravel            Decimal? @db.Decimal(15, 2)
  expFood              Decimal? @db.Decimal(15, 2)
  expRewards           Decimal? @db.Decimal(15, 2)
  expTickets           Decimal? @db.Decimal(15, 2)
  expAccommodation     Decimal? @db.Decimal(15, 2)
  expTransport         Decimal? @db.Decimal(15, 2)
  expOther             Decimal? @db.Decimal(15, 2)
  // Timestamps
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  // Relacje
  campId               String
  camp                 Camp     @relation(fields: [campId], references: [id])
  createdById          String
  createdBy            User     @relation("entryCreatedBy", fields: [createdById], references: [id])
  updatedById          String?
  updatedBy            User?    @relation("entryUpdatedBy", fields: [updatedById], references: [id])

  @@index([campId, ficoDate])
  @@index([campId])
}

model UserToCamp {
  // Composite Primary Key - User and Camp Relation
  id           String         @id @default(uuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  campId       String
  camp         Camp           @relation(fields: [campId], references: [id], onDelete: Cascade)
  // Invitation state
  accepted     Boolean        @default(false)
  // Timestamps
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // Notification relation
  Notification Notification[]

  @@unique([userId, campId])
  @@index([userId])
  @@index([campId])
}

// ===[NOTIFICATIONS AND MESSAGES MODELS]===========================================================
enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SYSTEM
  INVITATION
}

enum NotificationImportance {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Notification {
  // Composite Primary Key - User Relation
  id           String                 @id @default(uuid())
  userId       String
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Optional relation to specific camp participation - Comp Relation
  userToCampId String?
  userToCamp   UserToCamp?            @relation(fields: [userToCampId], references: [id], onDelete: Cascade)
  // Optional creator (SYSTEM or USER) - User Relation
  createdById  String?
  createdBy    User?                  @relation("notificationCreator", fields: [createdById], references: [id], onDelete: SetNull)
  // Notification Details
  type         NotificationType       @default(INFO)
  importance   NotificationImportance @default(MEDIUM)
  topic        String
  content      String                 @db.Text
  isRead       Boolean                @default(false)
  // Timestamps
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  @@index([userId, isRead])
}
