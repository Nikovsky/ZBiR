// @file: packages/database/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  // output   = "./../dist"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ROOT
  SYSTEM
  ADMIN
  SKARBNIK
  SKARBNIK_REGION
  USER
}

enum UserRegion {
  DOLNOSLASKI
  GORNOSLASKI
  KUJAWSKO_POMORSKI
  LUBELSKI
  LODZKI
  MALOPOLSKI
  MAZOWIECKI
  PODKARPACKI
  POMORSKI
  POLNOCNO_ZACHODNI
  STAROPOLSKI
  WIELKOPOLSKI
}

enum Gender {
  MALE
  FEMALE
}

enum NotificationType {
  INFO
  SYSTEM
  INVITATION
}

model User {
  id                  String              @id @default(uuid())
  name                String?
  username            String?
  email               String              @unique
  emailVerified       DateTime?
  image               String?
  password            String              @db.Text
  isActive            Boolean             @default(true)
  isBlocked           Boolean             @default(false)
  isEmailConfirmed    Boolean             @default(false)
  twoFactorEnabled    Boolean             @default(false)
  failedLoginAttempts Int                 @default(0)
  lastLoginAt         DateTime?
  role                UserRole            @default(USER)
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
  campsOwning         Camp[]              @relation("campOwner")
  createdEntries      FicoEntry[]         @relation("entryCreatedBy")
  updatedEntries      FicoEntry[]         @relation("entryUpdatedBy")
  userToCamps         UserToCamp[]
  regionAccess        UserRegionAccess[]
  personalData        PersonalData?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  VerificationToken   VerificationToken[]
  Notification        Notification[]

  @@index([email])
  @@index([isActive, role])
}

model PersonalData {
  id          String    @id @default(uuid())
  userId      String    @unique
  firstName   String?
  middleName  String?
  lastName    String?
  phoneNumber String?
  address     String?
  city        String?
  zipCode     String?
  country     String?
  birthDate   DateTime?
  canUserEdit Boolean   @default(true)
  gender      Gender?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([firstName, lastName])
  @@index([phoneNumber])
}

model Account {
  id                       String   @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  ip           String?
  deviceInfo   String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([ip])
}

enum VerificationTokenType {
  EMAIL_CONFIRMATION
  PASSWORD_RESET
  TWO_FACTOR
}

model VerificationToken {
  id         String                @id @default(uuid())
  userId     String
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       VerificationTokenType
  identifier String?
  token      String                @unique
  expires    DateTime
  createdAt  DateTime              @default(now())

  @@index([userId, type])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// ---------------- CAMP ----------------

model Camp {
  id         String     @id @default(uuid())
  name       String
  year       Int
  region     UserRegion
  isClosed   Boolean    @default(false)
  approvedAt DateTime?

  // Podsumowania (dla PDF, kontroli, audytu)
  incomeSum    Decimal @default("0.00") @db.Decimal(15, 2)
  expenseSum   Decimal @default("0.00") @db.Decimal(15, 2)
  balanceFinal Decimal @default("0.00") @db.Decimal(15, 2)

  ownerId String
  owner   User   @relation("campOwner", fields: [ownerId], references: [id])

  entries      FicoEntry[]
  participants UserToCamp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([year])
  @@index([region])
}

model FicoEntry {
  id              String   @id @default(uuid())
  ficoDate        DateTime
  ficoDescription String

  bankDeposit    Decimal? @db.Decimal(15, 2)
  bankWithdrawal Decimal? @db.Decimal(15, 2)

  // Wypłaty szczegółowe
  grantHq              Decimal? @db.Decimal(15, 2)
  grantEdu             Decimal? @db.Decimal(15, 2)
  grantMuni            Decimal? @db.Decimal(15, 2)
  incomeActions        Decimal? @db.Decimal(15, 2)
  incomeParticipantFee Decimal? @db.Decimal(15, 2)
  donationPrivate      Decimal? @db.Decimal(15, 2)
  donationOrg          Decimal? @db.Decimal(15, 2)
  incomeOnePercent     Decimal? @db.Decimal(15, 2)
  incomeOther          Decimal? @db.Decimal(15, 2)

  // Wydatki szczegółowe
  expEquipment      Decimal? @db.Decimal(15, 2)
  expMaterials      Decimal? @db.Decimal(15, 2)
  expCleaning       Decimal? @db.Decimal(15, 2)
  expOtherMaterials Decimal? @db.Decimal(15, 2)
  expEnergy         Decimal? @db.Decimal(15, 2)
  expPhone          Decimal? @db.Decimal(15, 2)
  expRent           Decimal? @db.Decimal(15, 2)
  expPost           Decimal? @db.Decimal(15, 2)
  expBank           Decimal? @db.Decimal(15, 2)
  expCourier        Decimal? @db.Decimal(15, 2)
  expServices       Decimal? @db.Decimal(15, 2)
  expSalary         Decimal? @db.Decimal(15, 2)
  expInsuranceOC    Decimal? @db.Decimal(15, 2)
  expInsuranceNNW   Decimal? @db.Decimal(15, 2)
  expTravel         Decimal? @db.Decimal(15, 2)
  expFood           Decimal? @db.Decimal(15, 2)
  expRewards        Decimal? @db.Decimal(15, 2)
  expTickets        Decimal? @db.Decimal(15, 2)
  expAccommodation  Decimal? @db.Decimal(15, 2)
  expTransport      Decimal? @db.Decimal(15, 2)
  expOther          Decimal? @db.Decimal(15, 2)

  // Relacje
  campId String
  camp   Camp   @relation(fields: [campId], references: [id])

  createdById String
  updatedById String?

  createdBy User  @relation("entryCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("entryUpdatedBy", fields: [updatedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([campId, ficoDate])
  @@index([campId])
}

model UserToCamp {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  campId String
  camp   Camp   @relation(fields: [campId], references: [id], onDelete: Cascade)

  accepted Boolean @default(false)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]

  @@unique([userId, campId])
  @@index([userId])
  @@index([campId])
}

model UserRegionAccess {
  id     String     @id @default(uuid())
  userId String
  region UserRegion

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, region])
  @@index([userId])
  @@index([region])
}

model Notification {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  userToCampId String?
  userToCamp   UserToCamp? @relation(fields: [userToCampId], references: [id], onDelete: Cascade)

  type    NotificationType
  topic   String
  content String           @db.Text

  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead])
}

// EOF
